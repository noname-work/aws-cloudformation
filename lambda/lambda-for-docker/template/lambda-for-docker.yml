AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Stop or start the resource at the specified time.
 
Parameters:
  LambdaName:
    Type: String
    Description: "Enter the name of the Lambda function."
    Default: "ec2-delete-lambda"
  LambdaEcrUri:
    Type: String
    Description: "URI of ECR to invoke the Lambda function."
    Default: "{AWSAccountID}.dkr.ecr.ap-northeast-1.amazonaws.com/lambda-docker:latest"
  EventTimeCron:
    Type: String
    Description: "Describe the Cron formula with a 9-hour gap."
    Default: "cron(0 15 * * ? *)"
  EnvTagName:
    Type: String
    Description: "Name of the tag to be deleted."
    Default: "delete"
  EnvTagValue:
    Type: String
    Description: "VALUE of the tag to be deleted."
    Default: "true"

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: !Sub ${LambdaName}-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - ec2:*
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Function to execute the AWS CLI"
      FunctionName: !Sub ${LambdaName}-start-func
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      Environment:
        Variables:
          TAG_NAME: !Ref EnvTagName
          TAG_VALUE: !Ref EnvTagValue
      Code:
        ImageUri: !Ref LambdaEcrUri
  
  LambdaEvent:
    Type: AWS::Events::Rule
    Description: "When the time is up, delete the server."
    Properties:
      State: ENABLED
      ScheduleExpression: !Ref EventTimeCron
      Name: !Sub ${LambdaName}-event
      Description: "When the time is up, delete the server."
      Targets: 
        - Arn: !GetAtt LambdaFunc.Arn
          Id: "LambdaFunc"

  PermissionForEventsLambda:
   Type: AWS::Lambda::Permission
   Properties:
     FunctionName: !Ref LambdaFunc
     Action: "lambda:InvokeFunction"
     Principal: "events.amazonaws.com"
     SourceArn: !GetAtt LambdaEvent.Arn
