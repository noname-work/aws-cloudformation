AWSTemplateFormatVersion: "2010-09-09"
Description:
  "Create definitions for ECS services and Fargate tasks.
  You need to prepare a Service-Linked ecsServiceRole in advance."

Parameters:
  ClusterName:
    Type: "String"
    Description: "Enter the name of the ECS Cluster."
    Default: "sample-ecs-cluster"
  ServiceName:
    Type: "String"
    Description: "Enter the name of the ECS Service."
    Default: "sample-ecs-service"
  DesiredServiceCount:
    Type: "Number"
    Description: "The desired number of containers for the service to run."
    Default: "2"
  ImageURI:
    Type: "String"
    Description: "Specify the image of the container to be launched."
    Default: "httpd:latest"
  ContainerPort:
    Type: "Number"
    Description: "Specifies the port number to connect to the container."
    Default: "80"
  ContainerName:
    Type: "String"
    Description: "Specify the name of the container to run."
    Default: "Web-Server"
  ServiceTargetGroup:
    Type: "String"
    Description: "Specify the ARN of the target group you created in advance."
    Default: "arn:aws:elasticloadbalancing:ap-northeast-1:{AWSAccountID}:targetgroup/xxxxxxxxxxxxx/xxxxxxxxxxxxxxxxx"
  FargateSubnetIDs:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "Select a subnet from one or more availability-zones."
  ECSSecurityGroups:
    Type: "List<AWS::EC2::SecurityGroup::Id>"
    Description: "Select the security group to be used for the Fargate of ECS."

Resources:
  # タスク定義の作成
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      # Fargate用のタスク定義として作成する
      RequiresCompatibilities:
        - "FARGATE"
      # Fargateで予約するvCPU
      Cpu: "256"
      # Fargateで予約するメモリ
      Memory: "512"
      ContainerDefinitions: 
        - Name: !Ref "ContainerName"
          Image: !Ref "ImageURI"
          # タスクコンテナで利用するvCPU
          Cpu: "256"
          # タスクコンテナで利用するメモリ
          Memory: "512"
          PortMappings: 
              # Fargateではホストとコンテナを同じポートにする
            - ContainerPort: !Ref "ContainerPort"
              HostPort: "80"
          # コンテナの立ち上げに失敗した時に関連コンテナを全て停止するか。今回は1つのタスク定義に1コンテナだけなのでtrueでOK
          Essential: "true" 
          # CloudWatchLogsにログを出力
          LogConfiguration:
            LogDriver: "awslogs"
            # ロググループを作成してログ出力する
            Options:
              awslogs-group: !Sub "/ecs/${ServiceName}"
              awslogs-region: "ap-northeast-1"
              awslogs-stream-prefix: "ecs"
              awslogs-create-group: "true"
      # タスク定義のファミリー名
      Family: !Sub "${ServiceName}-task"
      # Fargateはawsvpcを指定
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref "TaskExecutionRole"
      Tags: 
        - Key: "Name"
          Value: !Sub "${ServiceName}-task"

  # サービスの作成
  EcsService:
    Type: "AWS::ECS::Service"
    Properties: 
      ServiceName: !Ref "ServiceName"
      Cluster: !Ref "ClusterName"
      # サービスコンテナの希望数
      DesiredCount: !Ref "DesiredServiceCount"
      # Fargateで実行
      LaunchType: "FARGATE"
      # Fargateの場合はネットワーク設定が必要
      NetworkConfiguration:
        AwsvpcConfiguration:
          # プライベートリンクが設定されているか、Privateなサブネット上でNATゲートウェイがあるならDISABLEでも良い
          AssignPublicIp: "ENABLED"
          # Fargateにセキュリティグループの設定が必要
          SecurityGroups: !Ref "ECSSecurityGroups"
          # Fargateを実行するサブネット
          Subnets: !Ref "FargateSubnetIDs"
      # サービスと紐づくロードバランサーのターゲットグループを指定
      LoadBalancers: 
        - TargetGroupArn: !Ref "ServiceTargetGroup"
          ContainerName: !Ref "ContainerName"
          ContainerPort: !Ref "ContainerPort"
      # デーモン(インスタンスにつき1台サービスを実行)にするか、レプリカで起動するか
      SchedulingStrategy: "REPLICA"
      # デプロイ時の設定
      DeploymentConfiguration:
        # デプロイ時に最大で希望数の2倍になるタイミングがある
        MaximumPercent: "200"
        # デプロイ時に最小で希望数の半分になるタイミングがある
        MinimumHealthyPercent: "50"
      Tags: 
        - Key: "Name"
          Value: !Ref "ServiceName"
      # 利用するタスク定義
      TaskDefinition: !Ref "TaskDefinition"

  # Fargateのタスク実行ロール
  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ClusterName}-task-execution-role"
      # ECSのタスク実行ポリシーをアタッチ
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      # ロールにアタッチするポリシーを作成する
      Policies:
        - PolicyName: !Sub "${ClusterName}-task-execution-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                # CloudWatchLogsのロググループを作成する権限
                Action:
                  - "logs:CreateLogGroup"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
